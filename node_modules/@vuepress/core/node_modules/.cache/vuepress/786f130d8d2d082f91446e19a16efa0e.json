{"remainingRequest":"/home/lansong/MyStudyNote/node_modules/babel-loader/lib/index.js??ref--3-1!/home/lansong/MyStudyNote/node_modules/@vuepress/core/lib/client/util.js","dependencies":[{"path":"/home/lansong/MyStudyNote/node_modules/@vuepress/core/lib/client/util.js","mtime":1708915344173},{"path":"/home/lansong/MyStudyNote/node_modules/cache-loader/dist/cjs.js","mtime":1708865839236},{"path":"/home/lansong/MyStudyNote/node_modules/babel-loader/lib/index.js","mtime":1708915344507}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}